{"ast":null,"code":"'use strict';\n\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport useRefEffect from \"../Utilities/useRefEffect\";\nimport { AnimatedEvent } from \"./AnimatedEvent\";\nimport NativeAnimatedHelper from \"./NativeAnimatedHelper\";\nimport AnimatedProps from \"./nodes/AnimatedProps\";\nimport { useCallback, useEffect, useLayoutEffect, useMemo, useReducer, useRef } from 'react';\nexport default function useAnimatedProps(props) {\n  var _useReducer = useReducer(function (count) {\n      return count + 1;\n    }, 0),\n    _useReducer2 = _slicedToArray(_useReducer, 2),\n    scheduleUpdate = _useReducer2[1];\n  var onUpdateRef = useRef(null);\n  var node = useMemo(function () {\n    return new AnimatedProps(props, function () {\n      return onUpdateRef.current == null ? void 0 : onUpdateRef.current();\n    });\n  }, [props]);\n  useAnimatedPropsLifecycle(node);\n  var refEffect = useCallback(function (instance) {\n    node.setNativeView(instance);\n    onUpdateRef.current = function () {\n      if (process.env.NODE_ENV === 'test' || typeof instance !== 'object' || typeof (instance == null ? void 0 : instance.setNativeProps) !== 'function' || isFabricInstance(instance)) {\n        scheduleUpdate();\n      } else if (!node.__isNative) {\n        instance.setNativeProps(node.__getAnimatedValue());\n      } else {\n        throw new Error('Attempting to run JS driven animation on animated node ' + 'that has been moved to \"native\" earlier by starting an ' + 'animation with `useNativeDriver: true`');\n      }\n    };\n    var target = getEventTarget(instance);\n    var events = [];\n    for (var propName in props) {\n      var propValue = props[propName];\n      if (propValue instanceof AnimatedEvent && propValue.__isNative) {\n        propValue.__attach(target, propName);\n        events.push([propName, propValue]);\n      }\n    }\n    return function () {\n      onUpdateRef.current = null;\n      for (var _ref of events) {\n        var _ref2 = _slicedToArray(_ref, 2);\n        var _propName = _ref2[0];\n        var _propValue = _ref2[1];\n        _propValue.__detach(target, _propName);\n      }\n    };\n  }, [props, node]);\n  var callbackRef = useRefEffect(refEffect);\n  return [reduceAnimatedProps(node), callbackRef];\n}\nfunction reduceAnimatedProps(node) {\n  return _objectSpread(_objectSpread({}, node.__getValue()), {}, {\n    collapsable: false\n  });\n}\nfunction useAnimatedPropsLifecycle(node) {\n  var prevNodeRef = useRef(null);\n  var isUnmountingRef = useRef(false);\n  useEffect(function () {\n    NativeAnimatedHelper.API.flushQueue();\n  });\n  useLayoutEffect(function () {\n    isUnmountingRef.current = false;\n    return function () {\n      isUnmountingRef.current = true;\n    };\n  }, []);\n  useLayoutEffect(function () {\n    node.__attach();\n    if (prevNodeRef.current != null) {\n      var prevNode = prevNodeRef.current;\n      prevNode.__restoreDefaultValues();\n      prevNode.__detach();\n      prevNodeRef.current = null;\n    }\n    return function () {\n      if (isUnmountingRef.current) {\n        node.__detach();\n      } else {\n        prevNodeRef.current = node;\n      }\n    };\n  }, [node]);\n}\nfunction getEventTarget(instance) {\n  return typeof instance === 'object' && typeof (instance == null ? void 0 : instance.getScrollableNode) === 'function' ? instance.getScrollableNode() : instance;\n}\nfunction isFabricInstance(instance) {\n  var _instance$getScrollRe;\n  return hasFabricHandle(instance) || hasFabricHandle(instance == null ? void 0 : instance.getNativeScrollRef == null ? void 0 : instance.getNativeScrollRef()) || hasFabricHandle(instance == null ? void 0 : instance.getScrollResponder == null ? void 0 : (_instance$getScrollRe = instance.getScrollResponder()) == null ? void 0 : _instance$getScrollRe.getNativeScrollRef == null ? void 0 : _instance$getScrollRe.getNativeScrollRef());\n}\nfunction hasFabricHandle(instance) {\n  var _instance$_internalIn, _instance$_internalIn2;\n  return (instance == null ? void 0 : (_instance$_internalIn = instance['_internalInstanceHandle']) == null ? void 0 : (_instance$_internalIn2 = _instance$_internalIn.stateNode) == null ? void 0 : _instance$_internalIn2.canonical) != null;\n}","map":{"version":3,"names":["_defineProperty","_slicedToArray","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","useRefEffect","AnimatedEvent","NativeAnimatedHelper","AnimatedProps","useCallback","useEffect","useLayoutEffect","useMemo","useReducer","useRef","useAnimatedProps","props","_useReducer","count","_useReducer2","scheduleUpdate","onUpdateRef","node","current","useAnimatedPropsLifecycle","refEffect","instance","setNativeView","process","env","NODE_ENV","setNativeProps","isFabricInstance","__isNative","__getAnimatedValue","Error","getEventTarget","events","propName","propValue","__attach","_ref","_ref2","__detach","callbackRef","reduceAnimatedProps","__getValue","collapsable","prevNodeRef","isUnmountingRef","API","flushQueue","prevNode","__restoreDefaultValues","getScrollableNode","_instance$getScrollRe","hasFabricHandle","getNativeScrollRef","getScrollResponder","_instance$_internalIn","_instance$_internalIn2","stateNode","canonical"],"sources":["C:/Users/prann/better/saylah/node_modules/react-native/Libraries/Animated/useAnimatedProps.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow strict-local\n * @format\n */\n\n'use strict';\n\nimport useRefEffect from '../Utilities/useRefEffect';\nimport {AnimatedEvent} from './AnimatedEvent';\nimport NativeAnimatedHelper from './NativeAnimatedHelper';\nimport AnimatedProps from './nodes/AnimatedProps';\nimport {\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n} from 'react';\n\ntype ReducedProps<TProps> = {\n  ...TProps,\n  collapsable: boolean,\n  ...\n};\ntype CallbackRef<T> = T => mixed;\n\nexport default function useAnimatedProps<TProps: {...}, TInstance>(\n  props: TProps,\n): [ReducedProps<TProps>, CallbackRef<TInstance | null>] {\n  const [, scheduleUpdate] = useReducer<number, void>(count => count + 1, 0);\n  const onUpdateRef = useRef<?() => void>(null);\n\n  // TODO: Only invalidate `node` if animated props or `style` change. In the\n  // previous implementation, we permitted `style` to override props with the\n  // same name property name as styles, so we can probably continue doing that.\n  // The ordering of other props *should* not matter.\n  const node = useMemo(\n    () => new AnimatedProps(props, () => onUpdateRef.current?.()),\n    [props],\n  );\n  useAnimatedPropsLifecycle(node);\n\n  // TODO: This \"effect\" does three things:\n  //\n  //   1) Call `setNativeView`.\n  //   2) Update `onUpdateRef`.\n  //   3) Update listeners for `AnimatedEvent` props.\n  //\n  // Ideally, each of these would be separat \"effects\" so that they are not\n  // unnecessarily re-run when irrelevant dependencies change. For example, we\n  // should be able to hoist all `AnimatedEvent` props and only do #3 if either\n  // the `AnimatedEvent` props change or `instance` changes.\n  //\n  // But there is no way to transparently compose three separate callback refs,\n  // so we just combine them all into one for now.\n  const refEffect = useCallback(\n    (instance: TInstance) => {\n      // NOTE: This may be called more often than necessary (e.g. when `props`\n      // changes), but `setNativeView` already optimizes for that.\n      node.setNativeView(instance);\n\n      // NOTE: This callback is only used by the JavaScript animation driver.\n      onUpdateRef.current = () => {\n        if (\n          process.env.NODE_ENV === 'test' ||\n          typeof instance !== 'object' ||\n          typeof instance?.setNativeProps !== 'function' ||\n          isFabricInstance(instance)\n        ) {\n          // Schedule an update for this component to update `reducedProps`,\n          // but do not compute it immediately. If a parent also updated, we\n          // need to merge those new props in before updating.\n          scheduleUpdate();\n        } else if (!node.__isNative) {\n          // $FlowIgnore[not-a-function] - Assume it's still a function.\n          // $FlowFixMe[incompatible-use]\n          instance.setNativeProps(node.__getAnimatedValue());\n        } else {\n          throw new Error(\n            'Attempting to run JS driven animation on animated node ' +\n              'that has been moved to \"native\" earlier by starting an ' +\n              'animation with `useNativeDriver: true`',\n          );\n        }\n      };\n\n      const target = getEventTarget(instance);\n      const events = [];\n\n      for (const propName in props) {\n        const propValue = props[propName];\n        if (propValue instanceof AnimatedEvent && propValue.__isNative) {\n          propValue.__attach(target, propName);\n          events.push([propName, propValue]);\n        }\n      }\n\n      return () => {\n        onUpdateRef.current = null;\n\n        for (const [propName, propValue] of events) {\n          propValue.__detach(target, propName);\n        }\n      };\n    },\n    [props, node],\n  );\n  const callbackRef = useRefEffect<TInstance>(refEffect);\n\n  return [reduceAnimatedProps<TProps>(node), callbackRef];\n}\n\nfunction reduceAnimatedProps<TProps>(\n  node: AnimatedProps,\n): ReducedProps<TProps> {\n  // Force `collapsable` to be false so that the native view is not flattened.\n  // Flattened views cannot be accurately referenced by the native driver.\n  return {\n    ...node.__getValue(),\n    collapsable: false,\n  };\n}\n\n/**\n * Manages the lifecycle of the supplied `AnimatedProps` by invoking `__attach`\n * and `__detach`. However, this is more complicated because `AnimatedProps`\n * uses reference counting to determine when to recursively detach its children\n * nodes. So in order to optimize this, we avoid detaching until the next attach\n * unless we are unmounting.\n */\nfunction useAnimatedPropsLifecycle(node: AnimatedProps): void {\n  const prevNodeRef = useRef<?AnimatedProps>(null);\n  const isUnmountingRef = useRef<boolean>(false);\n\n  useEffect(() => {\n    // It is ok for multiple components to call `flushQueue` because it noops\n    // if the queue is empty. When multiple animated components are mounted at\n    // the same time. Only first component flushes the queue and the others will noop.\n    NativeAnimatedHelper.API.flushQueue();\n  });\n\n  useLayoutEffect(() => {\n    isUnmountingRef.current = false;\n    return () => {\n      isUnmountingRef.current = true;\n    };\n  }, []);\n\n  useLayoutEffect(() => {\n    node.__attach();\n    if (prevNodeRef.current != null) {\n      const prevNode = prevNodeRef.current;\n      // TODO: Stop restoring default values (unless `reset` is called).\n      prevNode.__restoreDefaultValues();\n      prevNode.__detach();\n      prevNodeRef.current = null;\n    }\n    return () => {\n      if (isUnmountingRef.current) {\n        // NOTE: Do not restore default values on unmount, see D18197735.\n        node.__detach();\n      } else {\n        prevNodeRef.current = node;\n      }\n    };\n  }, [node]);\n}\n\nfunction getEventTarget<TInstance>(instance: TInstance): TInstance {\n  return typeof instance === 'object' &&\n    typeof instance?.getScrollableNode === 'function'\n    ? // $FlowFixMe[incompatible-use] - Legacy instance assumptions.\n      instance.getScrollableNode()\n    : instance;\n}\n\n// $FlowFixMe[unclear-type] - Legacy instance assumptions.\nfunction isFabricInstance(instance: any): boolean {\n  return (\n    hasFabricHandle(instance) ||\n    // Some components have a setNativeProps function but aren't a host component\n    // such as lists like FlatList and SectionList. These should also use\n    // forceUpdate in Fabric since setNativeProps doesn't exist on the underlying\n    // host component. This crazy hack is essentially special casing those lists and\n    // ScrollView itself to use forceUpdate in Fabric.\n    // If these components end up using forwardRef then these hacks can go away\n    // as instance would actually be the underlying host component and the above check\n    // would be sufficient.\n    hasFabricHandle(instance?.getNativeScrollRef?.()) ||\n    hasFabricHandle(instance?.getScrollResponder?.()?.getNativeScrollRef?.())\n  );\n}\n\n// $FlowFixMe[unclear-type] - Legacy instance assumptions.\nfunction hasFabricHandle(instance: any): boolean {\n  // eslint-disable-next-line dot-notation\n  return instance?.['_internalInstanceHandle']?.stateNode?.canonical != null;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}