{"ast":null,"code":"'use strict';\n\nvar _defineProperty = require(\"@babel/runtime/helpers/defineProperty\");\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar infoLog = require(\"../Utilities/infoLog\");\nvar invariant = require('invariant');\nvar DEBUG = false;\nvar TaskQueue = function () {\n  function TaskQueue(_ref) {\n    var onMoreTasks = _ref.onMoreTasks;\n    _classCallCheck(this, TaskQueue);\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{\n      tasks: [],\n      popable: false\n    }];\n  }\n  _createClass(TaskQueue, [{\n    key: \"enqueue\",\n    value: function enqueue(task) {\n      this._getCurrentQueue().push(task);\n    }\n  }, {\n    key: \"enqueueTasks\",\n    value: function enqueueTasks(tasks) {\n      var _this = this;\n      tasks.forEach(function (task) {\n        return _this.enqueue(task);\n      });\n    }\n  }, {\n    key: \"cancelTasks\",\n    value: function cancelTasks(tasksToCancel) {\n      this._queueStack = this._queueStack.map(function (queue) {\n        return _objectSpread(_objectSpread({}, queue), {}, {\n          tasks: queue.tasks.filter(function (task) {\n            return tasksToCancel.indexOf(task) === -1;\n          })\n        });\n      }).filter(function (queue, idx) {\n        return queue.tasks.length > 0 || idx === 0;\n      });\n    }\n  }, {\n    key: \"hasTasksToProcess\",\n    value: function hasTasksToProcess() {\n      return this._getCurrentQueue().length > 0;\n    }\n  }, {\n    key: \"processNext\",\n    value: function processNext() {\n      var queue = this._getCurrentQueue();\n      if (queue.length) {\n        var task = queue.shift();\n        try {\n          if (typeof task === 'object' && task.gen) {\n            DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n            this._genPromise(task);\n          } else if (typeof task === 'object' && task.run) {\n            DEBUG && infoLog('TaskQueue: run task ' + task.name);\n            task.run();\n          } else {\n            invariant(typeof task === 'function', 'Expected Function, SimpleTask, or PromiseTask, but got:\\n' + JSON.stringify(task, null, 2));\n            DEBUG && infoLog('TaskQueue: run anonymous task');\n            task();\n          }\n        } catch (e) {\n          e.message = 'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n          throw e;\n        }\n      }\n    }\n  }, {\n    key: \"_getCurrentQueue\",\n    value: function _getCurrentQueue() {\n      var stackIdx = this._queueStack.length - 1;\n      var queue = this._queueStack[stackIdx];\n      if (queue.popable && queue.tasks.length === 0 && this._queueStack.length > 1) {\n        this._queueStack.pop();\n        DEBUG && infoLog('TaskQueue: popped queue: ', {\n          stackIdx: stackIdx,\n          queueStackSize: this._queueStack.length\n        });\n        return this._getCurrentQueue();\n      } else {\n        return queue.tasks;\n      }\n    }\n  }, {\n    key: \"_genPromise\",\n    value: function _genPromise(task) {\n      var _this2 = this;\n      this._queueStack.push({\n        tasks: [],\n        popable: false\n      });\n      var stackIdx = this._queueStack.length - 1;\n      var stackItem = this._queueStack[stackIdx];\n      DEBUG && infoLog('TaskQueue: push new queue: ', {\n        stackIdx: stackIdx\n      });\n      DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n      task.gen().then(function () {\n        DEBUG && infoLog('TaskQueue: onThen for gen task ' + task.name, {\n          stackIdx: stackIdx,\n          queueStackSize: _this2._queueStack.length\n        });\n        stackItem.popable = true;\n        _this2.hasTasksToProcess() && _this2._onMoreTasks();\n      }).catch(function (ex) {\n        setTimeout(function () {\n          ex.message = \"TaskQueue: Error resolving Promise in task \" + task.name + \": \" + ex.message;\n          throw ex;\n        }, 0);\n      });\n    }\n  }]);\n  return TaskQueue;\n}();\nmodule.exports = TaskQueue;","map":{"version":3,"names":["_defineProperty","require","_classCallCheck","_createClass","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","infoLog","invariant","DEBUG","TaskQueue","_ref","onMoreTasks","_onMoreTasks","_queueStack","tasks","popable","value","enqueue","task","_getCurrentQueue","enqueueTasks","_this","cancelTasks","tasksToCancel","map","queue","indexOf","idx","hasTasksToProcess","processNext","shift","gen","name","_genPromise","run","JSON","stringify","e","message","stackIdx","pop","queueStackSize","_this2","stackItem","then","catch","ex","setTimeout","module","exports"],"sources":["C:/Users/prann/better/saylah/node_modules/react-native/Libraries/Interaction/TaskQueue.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst infoLog = require('../Utilities/infoLog');\nconst invariant = require('invariant');\n\ntype SimpleTask = {\n  name: string,\n  run: () => void,\n};\ntype PromiseTask = {\n  name: string,\n  gen: () => Promise<void>,\n};\nexport type Task = SimpleTask | PromiseTask | (() => void);\n\nconst DEBUG: false = false;\n\n/**\n * TaskQueue - A system for queueing and executing a mix of simple callbacks and\n * trees of dependent tasks based on Promises. No tasks are executed unless\n * `processNext` is called.\n *\n * `enqueue` takes a Task object with either a simple `run` callback, or a\n * `gen` function that returns a `Promise` and puts it in the queue.  If a gen\n * function is supplied, then the promise it returns will block execution of\n * tasks already in the queue until it resolves. This can be used to make sure\n * the first task is fully resolved (including asynchronous dependencies that\n * also schedule more tasks via `enqueue`) before starting on the next task.\n * The `onMoreTasks` constructor argument is used to inform the owner that an\n * async task has resolved and that the queue should be processed again.\n *\n * Note: Tasks are only actually executed with explicit calls to `processNext`.\n */\nclass TaskQueue {\n  /**\n   * TaskQueue instances are self contained and independent, so multiple tasks\n   * of varying semantics and priority can operate together.\n   *\n   * `onMoreTasks` is invoked when `PromiseTask`s resolve if there are more\n   * tasks to process.\n   */\n  constructor({onMoreTasks}: {onMoreTasks: () => void, ...}) {\n    this._onMoreTasks = onMoreTasks;\n    this._queueStack = [{tasks: [], popable: false}];\n  }\n\n  /**\n   * Add a task to the queue.  It is recommended to name your tasks for easier\n   * async debugging. Tasks will not be executed until `processNext` is called\n   * explicitly.\n   */\n  enqueue(task: Task): void {\n    this._getCurrentQueue().push(task);\n  }\n\n  enqueueTasks(tasks: Array<Task>): void {\n    tasks.forEach(task => this.enqueue(task));\n  }\n\n  cancelTasks(tasksToCancel: Array<Task>): void {\n    // search through all tasks and remove them.\n    this._queueStack = this._queueStack\n      .map(queue => ({\n        ...queue,\n        tasks: queue.tasks.filter(task => tasksToCancel.indexOf(task) === -1),\n      }))\n      .filter((queue, idx) => queue.tasks.length > 0 || idx === 0);\n  }\n\n  /**\n   * Check to see if `processNext` should be called.\n   *\n   * @returns {boolean} Returns true if there are tasks that are ready to be\n   * processed with `processNext`, or returns false if there are no more tasks\n   * to be processed right now, although there may be tasks in the queue that\n   * are blocked by earlier `PromiseTask`s that haven't resolved yet.\n   * `onMoreTasks` will be called after each `PromiseTask` resolves if there are\n   * tasks ready to run at that point.\n   */\n  hasTasksToProcess(): boolean {\n    return this._getCurrentQueue().length > 0;\n  }\n\n  /**\n   * Executes the next task in the queue.\n   */\n  processNext(): void {\n    const queue = this._getCurrentQueue();\n    if (queue.length) {\n      const task = queue.shift();\n      try {\n        if (typeof task === 'object' && task.gen) {\n          DEBUG && infoLog('TaskQueue: genPromise for task ' + task.name);\n          this._genPromise(task);\n        } else if (typeof task === 'object' && task.run) {\n          DEBUG && infoLog('TaskQueue: run task ' + task.name);\n          task.run();\n        } else {\n          invariant(\n            typeof task === 'function',\n            'Expected Function, SimpleTask, or PromiseTask, but got:\\n' +\n              JSON.stringify(task, null, 2),\n          );\n          DEBUG && infoLog('TaskQueue: run anonymous task');\n          task();\n        }\n      } catch (e) {\n        e.message =\n          'TaskQueue: Error with task ' + (task.name || '') + ': ' + e.message;\n        throw e;\n      }\n    }\n  }\n\n  _queueStack: Array<{\n    tasks: Array<Task>,\n    popable: boolean,\n    ...\n  }>;\n  _onMoreTasks: () => void;\n\n  _getCurrentQueue(): Array<Task> {\n    const stackIdx = this._queueStack.length - 1;\n    const queue = this._queueStack[stackIdx];\n    if (\n      queue.popable &&\n      queue.tasks.length === 0 &&\n      this._queueStack.length > 1\n    ) {\n      this._queueStack.pop();\n      DEBUG &&\n        infoLog('TaskQueue: popped queue: ', {\n          stackIdx,\n          queueStackSize: this._queueStack.length,\n        });\n      return this._getCurrentQueue();\n    } else {\n      return queue.tasks;\n    }\n  }\n\n  _genPromise(task: PromiseTask) {\n    // Each async task pushes it's own queue onto the queue stack. This\n    // effectively defers execution of previously queued tasks until the promise\n    // resolves, at which point we allow the new queue to be popped, which\n    // happens once it is fully processed.\n    this._queueStack.push({tasks: [], popable: false});\n    const stackIdx = this._queueStack.length - 1;\n    const stackItem = this._queueStack[stackIdx];\n    DEBUG && infoLog('TaskQueue: push new queue: ', {stackIdx});\n    DEBUG && infoLog('TaskQueue: exec gen task ' + task.name);\n    task\n      .gen()\n      .then(() => {\n        DEBUG &&\n          infoLog('TaskQueue: onThen for gen task ' + task.name, {\n            stackIdx,\n            queueStackSize: this._queueStack.length,\n          });\n        stackItem.popable = true;\n        this.hasTasksToProcess() && this._onMoreTasks();\n      })\n      .catch(ex => {\n        setTimeout(() => {\n          ex.message = `TaskQueue: Error resolving Promise in task ${task.name}: ${ex.message}`;\n          throw ex;\n        }, 0);\n      });\n  }\n}\n\nmodule.exports = TaskQueue;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}