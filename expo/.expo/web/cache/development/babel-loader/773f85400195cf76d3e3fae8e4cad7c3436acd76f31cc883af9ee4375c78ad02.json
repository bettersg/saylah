{"ast":null,"code":"import NativeModulesProxy from \"./NativeModulesProxy\";\nexport function requireNativeModule(moduleName) {\n  var _ref, _global$expo$modules$, _global$expo, _global$expo$modules, _global$ExpoModules;\n  var nativeModule = (_ref = (_global$expo$modules$ = (_global$expo = global.expo) == null ? void 0 : (_global$expo$modules = _global$expo.modules) == null ? void 0 : _global$expo$modules[moduleName]) != null ? _global$expo$modules$ : (_global$ExpoModules = global.ExpoModules) == null ? void 0 : _global$ExpoModules[moduleName]) != null ? _ref : NativeModulesProxy[moduleName];\n  if (!nativeModule) {\n    throw new Error(\"Cannot find native module '\" + moduleName + \"'\");\n  }\n  return nativeModule;\n}","map":{"version":3,"names":["NativeModulesProxy","requireNativeModule","moduleName","_ref","_global$expo$modules$","_global$expo","_global$expo$modules","_global$ExpoModules","nativeModule","global","expo","modules","ExpoModules","Error"],"sources":["C:\\Users\\prann\\better\\saylah\\node_modules\\expo-modules-core\\src\\requireNativeModule.ts"],"sourcesContent":["import NativeModulesProxy from './NativeModulesProxy';\n\ntype ExpoObject = {\n  modules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n};\n\ndeclare global {\n  // eslint-disable-next-line no-var\n  var expo: ExpoObject | undefined;\n\n  /**\n   * @deprecated `global.ExpoModules` is deprecated, use `global.expo.modules` instead.\n   */\n  // eslint-disable-next-line no-var\n  var ExpoModules:\n    | undefined\n    | {\n        [key: string]: any;\n      };\n}\n\n/**\n * Imports the native module registered with given name. In the first place it tries to load\n * the module installed through the JSI host object and then falls back to the bridge proxy module.\n * Notice that the modules loaded from the proxy may not support some features like synchronous functions.\n *\n * @param moduleName Name of the requested native module.\n * @returns Object representing the native module.\n * @throws Error when there is no native module with given name.\n */\nexport function requireNativeModule<ModuleType = any>(moduleName: string): ModuleType {\n  const nativeModule: ModuleType =\n    global.expo?.modules?.[moduleName] ??\n    global.ExpoModules?.[moduleName] ??\n    NativeModulesProxy[moduleName];\n\n  if (!nativeModule) {\n    throw new Error(`Cannot find native module '${moduleName}'`);\n  }\n  return nativeModule;\n}\n"],"mappings":"AAAA,OAAOA,kBAAkB;AAkCzB,OAAM,SAAUC,mBAAmBA,CAAmBC,UAAkB;EAAA,IAAAC,IAAA,EAAAC,qBAAA,EAAAC,YAAA,EAAAC,oBAAA,EAAAC,mBAAA;EACtE,IAAMC,YAAY,IAAAL,IAAA,IAAAC,qBAAA,IAAAC,YAAA,GAChBI,MAAM,CAACC,IAAI,sBAAAJ,oBAAA,GAAXD,YAAA,CAAaM,OAAO,qBAApBL,oBAAA,CAAuBJ,UAAU,CAAC,YAAAE,qBAAA,IAAAG,mBAAA,GAClCE,MAAM,CAACG,WAAW,qBAAlBL,mBAAA,CAAqBL,UAAU,CAAC,YAAAC,IAAA,GAChCH,kBAAkB,CAACE,UAAU,CAAC;EAEhC,IAAI,CAACM,YAAY,EAAE;IACjB,MAAM,IAAIK,KAAK,iCAA+BX,UAAU,MAAG,CAAC;;EAE9D,OAAOM,YAAY;AACrB"},"metadata":{},"sourceType":"module","externalDependencies":[]}