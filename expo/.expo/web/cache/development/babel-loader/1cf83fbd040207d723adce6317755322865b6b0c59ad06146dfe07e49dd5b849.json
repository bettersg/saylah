{"ast":null,"code":"'use strict';\n\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _get from \"@babel/runtime/helpers/get\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport normalizeColor from \"../../StyleSheet/normalizeColor\";\nimport NativeAnimatedHelper from \"../NativeAnimatedHelper\";\nimport AnimatedWithChildren from \"./AnimatedWithChildren\";\nimport invariant from 'invariant';\nvar linear = function linear(t) {\n  return t;\n};\nfunction createInterpolation(config) {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return createInterpolationFromStringOutputRange(config);\n  }\n  var outputRange = config.outputRange;\n  var inputRange = config.inputRange;\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n    invariant(inputRange.length === outputRange.length, 'inputRange (' + inputRange.length + ') and outputRange (' + outputRange.length + ') must have the same length');\n  }\n  var easing = config.easing || linear;\n  var extrapolateLeft = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n  var extrapolateRight = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n  return function (input) {\n    invariant(typeof input === 'number', 'Cannot interpolation an input which is not a number');\n    var range = findRange(input, inputRange);\n    return interpolate(input, inputRange[range], inputRange[range + 1], outputRange[range], outputRange[range + 1], easing, extrapolateLeft, extrapolateRight);\n  };\n}\nfunction interpolate(input, inputMin, inputMax, outputMin, outputMax, easing, extrapolateLeft, extrapolateRight) {\n  var result = input;\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {}\n  }\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {}\n  }\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n  result = easing(result);\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n  return result;\n}\nfunction colorToRgba(input) {\n  var normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n  normalizedColor = normalizedColor || 0;\n  var r = (normalizedColor & 0xff000000) >>> 24;\n  var g = (normalizedColor & 0x00ff0000) >>> 16;\n  var b = (normalizedColor & 0x0000ff00) >>> 8;\n  var a = (normalizedColor & 0x000000ff) / 255;\n  return \"rgba(\" + r + \", \" + g + \", \" + b + \", \" + a + \")\";\n}\nvar stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\nfunction createInterpolationFromStringOutputRange(config) {\n  var outputRange = config.outputRange;\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n  var outputRanges = outputRange[0].match(stringShapeRegex).map(function () {\n    return [];\n  });\n  outputRange.forEach(function (value) {\n    value.match(stringShapeRegex).forEach(function (number, i) {\n      outputRanges[i].push(+number);\n    });\n  });\n  var interpolations = outputRange[0].match(stringShapeRegex).map(function (value, i) {\n    return createInterpolation(_objectSpread(_objectSpread({}, config), {}, {\n      outputRange: outputRanges[i]\n    }));\n  });\n  var shouldRound = isRgbOrRgba(outputRange[0]);\n  return function (input) {\n    var i = 0;\n    return outputRange[0].replace(stringShapeRegex, function () {\n      var val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\nfunction isRgbOrRgba(range) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\nfunction checkPattern(arr) {\n  var pattern = arr[0].replace(stringShapeRegex, '');\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(pattern === arr[i].replace(stringShapeRegex, ''), 'invalid pattern ' + arr[0] + ' and ' + arr[i]);\n  }\n}\nfunction findRange(input, inputRange) {\n  var i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\nfunction checkValidInputRange(arr) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  var message = 'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (var i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\nfunction checkInfiniteRange(name, arr) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity, name + 'cannot be ]-infinity;+infinity[ ' + arr);\n}\nvar AnimatedInterpolation = function (_AnimatedWithChildren) {\n  _inherits(AnimatedInterpolation, _AnimatedWithChildren);\n  var _super = _createSuper(AnimatedInterpolation);\n  function AnimatedInterpolation(parent, config) {\n    var _this;\n    _classCallCheck(this, AnimatedInterpolation);\n    _this = _super.call(this);\n    _this._parent = parent;\n    _this._config = config;\n    _this._interpolation = createInterpolation(config);\n    return _this;\n  }\n  _createClass(AnimatedInterpolation, [{\n    key: \"__makeNative\",\n    value: function __makeNative(platformConfig) {\n      this._parent.__makeNative(platformConfig);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__makeNative\", this).call(this, platformConfig);\n    }\n  }, {\n    key: \"__getValue\",\n    value: function __getValue() {\n      var parentValue = this._parent.__getValue();\n      invariant(typeof parentValue === 'number', 'Cannot interpolate an input which is not a number.');\n      return this._interpolation(parentValue);\n    }\n  }, {\n    key: \"interpolate\",\n    value: function interpolate(config) {\n      return new AnimatedInterpolation(this, config);\n    }\n  }, {\n    key: \"__attach\",\n    value: function __attach() {\n      this._parent.__addChild(this);\n    }\n  }, {\n    key: \"__detach\",\n    value: function __detach() {\n      this._parent.__removeChild(this);\n      _get(_getPrototypeOf(AnimatedInterpolation.prototype), \"__detach\", this).call(this);\n    }\n  }, {\n    key: \"__transformDataType\",\n    value: function __transformDataType(range) {\n      return range.map(NativeAnimatedHelper.transformDataType);\n    }\n  }, {\n    key: \"__getNativeConfig\",\n    value: function __getNativeConfig() {\n      if (__DEV__) {\n        NativeAnimatedHelper.validateInterpolation(this._config);\n      }\n      return {\n        inputRange: this._config.inputRange,\n        outputRange: this.__transformDataType(this._config.outputRange),\n        extrapolateLeft: this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n        extrapolateRight: this._config.extrapolateRight || this._config.extrapolate || 'extend',\n        type: 'interpolation'\n      };\n    }\n  }]);\n  return AnimatedInterpolation;\n}(AnimatedWithChildren);\nAnimatedInterpolation.__createInterpolation = createInterpolation;\nexport { AnimatedInterpolation as default };","map":{"version":3,"names":["_classCallCheck","_createClass","_get","_inherits","_possibleConstructorReturn","_getPrototypeOf","_defineProperty","_createSuper","Derived","hasNativeReflectConstruct","_isNativeReflectConstruct","_createSuperInternal","Super","result","NewTarget","constructor","Reflect","construct","arguments","apply","sham","Proxy","Boolean","prototype","valueOf","call","e","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","_objectSpread","target","i","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","normalizeColor","NativeAnimatedHelper","AnimatedWithChildren","invariant","linear","t","createInterpolation","config","outputRange","createInterpolationFromStringOutputRange","inputRange","__DEV__","checkInfiniteRange","checkValidInputRange","easing","extrapolateLeft","undefined","extrapolate","extrapolateRight","input","range","findRange","interpolate","inputMin","inputMax","outputMin","outputMax","Infinity","colorToRgba","normalizedColor","r","g","b","a","stringShapeRegex","map","checkPattern","outputRanges","match","value","number","interpolations","shouldRound","isRgbOrRgba","replace","val","Math","round","String","startsWith","arr","pattern","message","name","AnimatedInterpolation","_AnimatedWithChildren","_super","parent","_this","_parent","_config","_interpolation","__makeNative","platformConfig","__getValue","parentValue","__attach","__addChild","__detach","__removeChild","__transformDataType","transformDataType","__getNativeConfig","validateInterpolation","type","__createInterpolation","default"],"sources":["C:/Users/prann/better/saylah/node_modules/react-native/Libraries/Animated/nodes/AnimatedInterpolation.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @flow\n * @format\n */\n\n/* eslint no-bitwise: 0 */\n\n'use strict';\n\nimport type {PlatformConfig} from '../AnimatedPlatformConfig';\nimport type AnimatedNode from './AnimatedNode';\n\nimport normalizeColor from '../../StyleSheet/normalizeColor';\nimport NativeAnimatedHelper from '../NativeAnimatedHelper';\nimport AnimatedWithChildren from './AnimatedWithChildren';\nimport invariant from 'invariant';\n\ntype ExtrapolateType = 'extend' | 'identity' | 'clamp';\n\nexport type InterpolationConfigType<OutputT: number | string> = $ReadOnly<{\n  inputRange: $ReadOnlyArray<number>,\n  outputRange: $ReadOnlyArray<OutputT>,\n  easing?: (input: number) => number,\n  extrapolate?: ExtrapolateType,\n  extrapolateLeft?: ExtrapolateType,\n  extrapolateRight?: ExtrapolateType,\n}>;\n\nconst linear = (t: number) => t;\n\n/**\n * Very handy helper to map input ranges to output ranges with an easing\n * function and custom behavior outside of the ranges.\n */\nfunction createInterpolation<OutputT: number | string>(\n  config: InterpolationConfigType<OutputT>,\n): (input: number) => OutputT {\n  if (config.outputRange && typeof config.outputRange[0] === 'string') {\n    return (createInterpolationFromStringOutputRange((config: any)): any);\n  }\n\n  const outputRange: $ReadOnlyArray<number> = (config.outputRange: any);\n\n  const inputRange = config.inputRange;\n\n  if (__DEV__) {\n    checkInfiniteRange('outputRange', outputRange);\n    checkInfiniteRange('inputRange', inputRange);\n    checkValidInputRange(inputRange);\n\n    invariant(\n      inputRange.length === outputRange.length,\n      'inputRange (' +\n        inputRange.length +\n        ') and outputRange (' +\n        outputRange.length +\n        ') must have the same length',\n    );\n  }\n\n  const easing = config.easing || linear;\n\n  let extrapolateLeft: ExtrapolateType = 'extend';\n  if (config.extrapolateLeft !== undefined) {\n    extrapolateLeft = config.extrapolateLeft;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateLeft = config.extrapolate;\n  }\n\n  let extrapolateRight: ExtrapolateType = 'extend';\n  if (config.extrapolateRight !== undefined) {\n    extrapolateRight = config.extrapolateRight;\n  } else if (config.extrapolate !== undefined) {\n    extrapolateRight = config.extrapolate;\n  }\n\n  return input => {\n    invariant(\n      typeof input === 'number',\n      'Cannot interpolation an input which is not a number',\n    );\n\n    const range = findRange(input, inputRange);\n    return (interpolate(\n      input,\n      inputRange[range],\n      inputRange[range + 1],\n      outputRange[range],\n      outputRange[range + 1],\n      easing,\n      extrapolateLeft,\n      extrapolateRight,\n    ): any);\n  };\n}\n\nfunction interpolate(\n  input: number,\n  inputMin: number,\n  inputMax: number,\n  outputMin: number,\n  outputMax: number,\n  easing: (input: number) => number,\n  extrapolateLeft: ExtrapolateType,\n  extrapolateRight: ExtrapolateType,\n) {\n  let result = input;\n\n  // Extrapolate\n  if (result < inputMin) {\n    if (extrapolateLeft === 'identity') {\n      return result;\n    } else if (extrapolateLeft === 'clamp') {\n      result = inputMin;\n    } else if (extrapolateLeft === 'extend') {\n      // noop\n    }\n  }\n\n  if (result > inputMax) {\n    if (extrapolateRight === 'identity') {\n      return result;\n    } else if (extrapolateRight === 'clamp') {\n      result = inputMax;\n    } else if (extrapolateRight === 'extend') {\n      // noop\n    }\n  }\n\n  if (outputMin === outputMax) {\n    return outputMin;\n  }\n\n  if (inputMin === inputMax) {\n    if (input <= inputMin) {\n      return outputMin;\n    }\n    return outputMax;\n  }\n\n  // Input Range\n  if (inputMin === -Infinity) {\n    result = -result;\n  } else if (inputMax === Infinity) {\n    result = result - inputMin;\n  } else {\n    result = (result - inputMin) / (inputMax - inputMin);\n  }\n\n  // Easing\n  result = easing(result);\n\n  // Output Range\n  if (outputMin === -Infinity) {\n    result = -result;\n  } else if (outputMax === Infinity) {\n    result = result + outputMin;\n  } else {\n    result = result * (outputMax - outputMin) + outputMin;\n  }\n\n  return result;\n}\n\nfunction colorToRgba(input: string): string {\n  let normalizedColor = normalizeColor(input);\n  if (normalizedColor === null || typeof normalizedColor !== 'number') {\n    return input;\n  }\n\n  normalizedColor = normalizedColor || 0;\n\n  const r = (normalizedColor & 0xff000000) >>> 24;\n  const g = (normalizedColor & 0x00ff0000) >>> 16;\n  const b = (normalizedColor & 0x0000ff00) >>> 8;\n  const a = (normalizedColor & 0x000000ff) / 255;\n\n  return `rgba(${r}, ${g}, ${b}, ${a})`;\n}\n\nconst stringShapeRegex = /[+-]?(?:\\d+\\.?\\d*|\\.\\d+)(?:[eE][+-]?\\d+)?/g;\n\n/**\n * Supports string shapes by extracting numbers so new values can be computed,\n * and recombines those values into new strings of the same shape.  Supports\n * things like:\n *\n *   rgba(123, 42, 99, 0.36) // colors\n *   -45deg                  // values with units\n */\nfunction createInterpolationFromStringOutputRange(\n  config: InterpolationConfigType<string>,\n): (input: number) => string {\n  let outputRange: Array<string> = (config.outputRange: any);\n  invariant(outputRange.length >= 2, 'Bad output range');\n  outputRange = outputRange.map(colorToRgba);\n  checkPattern(outputRange);\n\n  // ['rgba(0, 100, 200, 0)', 'rgba(50, 150, 250, 0.5)']\n  // ->\n  // [\n  //   [0, 50],\n  //   [100, 150],\n  //   [200, 250],\n  //   [0, 0.5],\n  // ]\n  /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n   * return `null`. Need to guard against this possibility. */\n  const outputRanges = outputRange[0].match(stringShapeRegex).map(() => []);\n  outputRange.forEach(value => {\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `value.match()` can return\n     * `null`. Need to guard against this possibility. */\n    value.match(stringShapeRegex).forEach((number, i) => {\n      outputRanges[i].push(+number);\n    });\n  });\n\n  const interpolations = outputRange[0]\n    .match(stringShapeRegex)\n    /* $FlowFixMe[incompatible-use] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    /* $FlowFixMe[incompatible-call] (>=0.18.0): `outputRange[0].match()` can\n     * return `null`. Need to guard against this possibility. */\n    .map((value, i) => {\n      return createInterpolation({\n        ...config,\n        outputRange: outputRanges[i],\n      });\n    });\n\n  // rgba requires that the r,g,b are integers.... so we want to round them, but we *dont* want to\n  // round the opacity (4th column).\n  const shouldRound = isRgbOrRgba(outputRange[0]);\n\n  return input => {\n    let i = 0;\n    // 'rgba(0, 100, 200, 0)'\n    // ->\n    // 'rgba(${interpolations[0](input)}, ${interpolations[1](input)}, ...'\n    return outputRange[0].replace(stringShapeRegex, () => {\n      let val = +interpolations[i++](input);\n      if (shouldRound) {\n        val = i < 4 ? Math.round(val) : Math.round(val * 1000) / 1000;\n      }\n      return String(val);\n    });\n  };\n}\n\nfunction isRgbOrRgba(range: string) {\n  return typeof range === 'string' && range.startsWith('rgb');\n}\n\nfunction checkPattern(arr: $ReadOnlyArray<string>) {\n  const pattern = arr[0].replace(stringShapeRegex, '');\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(\n      pattern === arr[i].replace(stringShapeRegex, ''),\n      'invalid pattern ' + arr[0] + ' and ' + arr[i],\n    );\n  }\n}\n\nfunction findRange(input: number, inputRange: $ReadOnlyArray<number>) {\n  let i;\n  for (i = 1; i < inputRange.length - 1; ++i) {\n    if (inputRange[i] >= input) {\n      break;\n    }\n  }\n  return i - 1;\n}\n\nfunction checkValidInputRange(arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, 'inputRange must have at least 2 elements');\n  const message =\n    'inputRange must be monotonically non-decreasing ' + String(arr);\n  for (let i = 1; i < arr.length; ++i) {\n    invariant(arr[i] >= arr[i - 1], message);\n  }\n}\n\nfunction checkInfiniteRange(name: string, arr: $ReadOnlyArray<number>) {\n  invariant(arr.length >= 2, name + ' must have at least 2 elements');\n  invariant(\n    arr.length !== 2 || arr[0] !== -Infinity || arr[1] !== Infinity,\n    /* $FlowFixMe[incompatible-type] (>=0.13.0) - In the addition expression\n     * below this comment, one or both of the operands may be something that\n     * doesn't cleanly convert to a string, like undefined, null, and object,\n     * etc. If you really mean this implicit string conversion, you can do\n     * something like String(myThing) */\n    name + 'cannot be ]-infinity;+infinity[ ' + arr,\n  );\n}\n\nexport default class AnimatedInterpolation<\n  OutputT: number | string,\n> extends AnimatedWithChildren {\n  // Export for testing.\n  static __createInterpolation: (\n    config: InterpolationConfigType<OutputT>,\n  ) => (input: number) => OutputT = createInterpolation;\n\n  _parent: AnimatedNode;\n  _config: InterpolationConfigType<OutputT>;\n  _interpolation: (input: number) => OutputT;\n\n  constructor(parent: AnimatedNode, config: InterpolationConfigType<OutputT>) {\n    super();\n    this._parent = parent;\n    this._config = config;\n    this._interpolation = createInterpolation(config);\n  }\n\n  __makeNative(platformConfig: ?PlatformConfig) {\n    this._parent.__makeNative(platformConfig);\n    super.__makeNative(platformConfig);\n  }\n\n  __getValue(): number | string {\n    const parentValue: number = this._parent.__getValue();\n    invariant(\n      typeof parentValue === 'number',\n      'Cannot interpolate an input which is not a number.',\n    );\n    return this._interpolation(parentValue);\n  }\n\n  interpolate<NewOutputT: number | string>(\n    config: InterpolationConfigType<NewOutputT>,\n  ): AnimatedInterpolation<NewOutputT> {\n    return new AnimatedInterpolation(this, config);\n  }\n\n  __attach(): void {\n    this._parent.__addChild(this);\n  }\n\n  __detach(): void {\n    this._parent.__removeChild(this);\n    super.__detach();\n  }\n\n  __transformDataType(range: $ReadOnlyArray<OutputT>): Array<any> {\n    return range.map(NativeAnimatedHelper.transformDataType);\n  }\n\n  __getNativeConfig(): any {\n    if (__DEV__) {\n      NativeAnimatedHelper.validateInterpolation(this._config);\n    }\n\n    return {\n      inputRange: this._config.inputRange,\n      // Only the `outputRange` can contain strings so we don't need to transform `inputRange` here\n      outputRange: this.__transformDataType(this._config.outputRange),\n      extrapolateLeft:\n        this._config.extrapolateLeft || this._config.extrapolate || 'extend',\n      extrapolateRight:\n        this._config.extrapolateRight || this._config.extrapolate || 'extend',\n      type: 'interpolation',\n    };\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}