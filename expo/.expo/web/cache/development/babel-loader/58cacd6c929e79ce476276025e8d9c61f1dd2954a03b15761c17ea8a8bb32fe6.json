{"ast":null,"code":"'use strict';\n\nfunction setAndForwardRef(_ref) {\n  var getForwardedRef = _ref.getForwardedRef,\n    setLocalRef = _ref.setLocalRef;\n  return function forwardRef(ref) {\n    var forwardedRef = getForwardedRef();\n    setLocalRef(ref);\n    if (typeof forwardedRef === 'function') {\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      forwardedRef.current = ref;\n    }\n  };\n}\nmodule.exports = setAndForwardRef;","map":{"version":3,"names":["setAndForwardRef","_ref","getForwardedRef","setLocalRef","forwardRef","ref","forwardedRef","current","module","exports"],"sources":["C:/Users/prann/better/saylah/node_modules/react-native/Libraries/Utilities/setAndForwardRef.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport type {ElementRef, Ref} from 'react';\n\ntype Args = $ReadOnly<{|\n  getForwardedRef: () => ?Ref<any>,\n  setLocalRef: (ref: ElementRef<any>) => mixed,\n|}>;\n\n/**\n * This is a helper function for when a component needs to be able to forward a ref\n * to a child component, but still needs to have access to that component as part of\n * its implementation.\n *\n * Its main use case is in wrappers for native components.\n *\n * Usage:\n *\n *   class MyView extends React.Component {\n *     _nativeRef = null;\n *\n *     _setNativeRef = setAndForwardRef({\n *       getForwardedRef: () => this.props.forwardedRef,\n *       setLocalRef: ref => {\n *         this._nativeRef = ref;\n *       },\n *     });\n *\n *     render() {\n *       return <View ref={this._setNativeRef} />;\n *     }\n *   }\n *\n *   const MyViewWithRef = React.forwardRef((props, ref) => (\n *     <MyView {...props} forwardedRef={ref} />\n *   ));\n *\n *   module.exports = MyViewWithRef;\n */\n\nfunction setAndForwardRef({\n  getForwardedRef,\n  setLocalRef,\n}: Args): (ref: ElementRef<any>) => void {\n  return function forwardRef(ref: ElementRef<any>) {\n    const forwardedRef = getForwardedRef();\n\n    setLocalRef(ref);\n\n    // Forward to user ref prop (if one has been specified)\n    if (typeof forwardedRef === 'function') {\n      // Handle function-based refs. String-based refs are handled as functions.\n      forwardedRef(ref);\n    } else if (typeof forwardedRef === 'object' && forwardedRef != null) {\n      // Handle createRef-based refs\n      forwardedRef.current = ref;\n    }\n  };\n}\n\nmodule.exports = setAndForwardRef;\n"],"mappings":"AAUA,YAAY;;AAwCZ,SAASA,gBAAgBA,CAAAC,IAAA,EAGgB;EAAA,IAFvCC,eAAe,GAAAD,IAAA,CAAfC,eAAe;IACfC,WAAW,GAAAF,IAAA,CAAXE,WAAW;EAEX,OAAO,SAASC,UAAUA,CAACC,GAAoB,EAAE;IAC/C,IAAMC,YAAY,GAAGJ,eAAe,CAAC,CAAC;IAEtCC,WAAW,CAACE,GAAG,CAAC;IAGhB,IAAI,OAAOC,YAAY,KAAK,UAAU,EAAE;MAEtCA,YAAY,CAACD,GAAG,CAAC;IACnB,CAAC,MAAM,IAAI,OAAOC,YAAY,KAAK,QAAQ,IAAIA,YAAY,IAAI,IAAI,EAAE;MAEnEA,YAAY,CAACC,OAAO,GAAGF,GAAG;IAC5B;EACF,CAAC;AACH;AAEAG,MAAM,CAACC,OAAO,GAAGT,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}